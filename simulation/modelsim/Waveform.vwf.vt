// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/02/2020 09:16:12"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    mcp2515
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mcp2515_vlg_sample_tst(
	clk50,
	rst_n,
	sampler_tx
);
input  clk50;
input  rst_n;
output sampler_tx;

reg sample;
time current_time;
always @(clk50 or rst_n)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module mcp2515_vlg_check_tst (
	cs,
	sck,
	si,
	tx_empty,
	sampler_rx
);
input  cs;
input  sck;
input  si;
input  tx_empty;
input sampler_rx;

reg  cs_expected;
reg  sck_expected;
reg  si_expected;
reg  tx_empty_expected;

reg  cs_prev;
reg  sck_prev;
reg  si_prev;
reg  tx_empty_prev;

reg  cs_expected_prev;
reg  sck_expected_prev;
reg  si_expected_prev;
reg  tx_empty_expected_prev;

reg  last_cs_exp;
reg  last_sck_exp;
reg  last_si_exp;
reg  last_tx_empty_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	cs_prev = cs;
	sck_prev = sck;
	si_prev = si;
	tx_empty_prev = tx_empty;
end

// update expected /o prevs

always @(trigger)
begin
	cs_expected_prev = cs_expected;
	sck_expected_prev = sck_expected;
	si_expected_prev = si_expected;
	tx_empty_expected_prev = tx_empty_expected;
end



// expected cs
initial
begin
	cs_expected = 1'bX;
end 

// expected sck
initial
begin
	sck_expected = 1'bX;
end 

// expected si
initial
begin
	si_expected = 1'bX;
end 

// expected tx_empty
initial
begin
	tx_empty_expected = 1'bX;
end 
// generate trigger
always @(cs_expected or cs or sck_expected or sck or si_expected or si or tx_empty_expected or tx_empty)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected cs = %b | expected sck = %b | expected si = %b | expected tx_empty = %b | ",cs_expected_prev,sck_expected_prev,si_expected_prev,tx_empty_expected_prev);
	$display("| real cs = %b | real sck = %b | real si = %b | real tx_empty = %b | ",cs_prev,sck_prev,si_prev,tx_empty_prev);
`endif
	if (
		( cs_expected_prev !== 1'bx ) && ( cs_prev !== cs_expected_prev )
		&& ((cs_expected_prev !== last_cs_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cs :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cs_expected_prev);
		$display ("     Real value = %b", cs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cs_exp = cs_expected_prev;
	end
	if (
		( sck_expected_prev !== 1'bx ) && ( sck_prev !== sck_expected_prev )
		&& ((sck_expected_prev !== last_sck_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sck :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sck_expected_prev);
		$display ("     Real value = %b", sck_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sck_exp = sck_expected_prev;
	end
	if (
		( si_expected_prev !== 1'bx ) && ( si_prev !== si_expected_prev )
		&& ((si_expected_prev !== last_si_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port si :: @time = %t",  $realtime);
		$display ("     Expected value = %b", si_expected_prev);
		$display ("     Real value = %b", si_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_si_exp = si_expected_prev;
	end
	if (
		( tx_empty_expected_prev !== 1'bx ) && ( tx_empty_prev !== tx_empty_expected_prev )
		&& ((tx_empty_expected_prev !== last_tx_empty_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_empty :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_empty_expected_prev);
		$display ("     Real value = %b", tx_empty_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tx_empty_exp = tx_empty_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module mcp2515_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk50;
reg rst_n;
// wires                                               
wire cs;
wire sck;
wire si;
wire tx_empty;

wire sampler;                             

// assign statements (if any)                          
mcp2515 i1 (
// port map - connection between master ports and signals/registers   
	.clk50(clk50),
	.cs(cs),
	.rst_n(rst_n),
	.sck(sck),
	.si(si),
	.tx_empty(tx_empty)
);

// clk50
always
begin
	clk50 = 1'b0;
	clk50 = #5000 1'b1;
	#5000;
end 

// rst_n
initial
begin
	rst_n = 1'b0;
	rst_n = #40000 1'b1;
end 

mcp2515_vlg_sample_tst tb_sample (
	.clk50(clk50),
	.rst_n(rst_n),
	.sampler_tx(sampler)
);

mcp2515_vlg_check_tst tb_out(
	.cs(cs),
	.sck(sck),
	.si(si),
	.tx_empty(tx_empty),
	.sampler_rx(sampler)
);
endmodule

