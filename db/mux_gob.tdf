--lpm_mux CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" LPM_SIZE=4 LPM_WIDTH=11 LPM_WIDTHS=2 data result sel
--VERSION_BEGIN 15.0 cbx_lpm_mux 2015:04:22:18:04:08:SJ cbx_mgl 2015:04:22:18:06:50:SJ  VERSION_END


-- Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, the Altera Quartus II License Agreement,
--  the Altera MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Altera and sold by Altera or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.



--synthesis_resources = lut 22 
SUBDESIGN mux_gob
( 
	data[43..0]	:	input;
	result[10..0]	:	output;
	sel[1..0]	:	input;
) 
VARIABLE 
	result_node[10..0]	: WIRE;
	sel_node[1..0]	: WIRE;
	w_data428w[3..0]	: WIRE;
	w_data458w[3..0]	: WIRE;
	w_data483w[3..0]	: WIRE;
	w_data508w[3..0]	: WIRE;
	w_data533w[3..0]	: WIRE;
	w_data558w[3..0]	: WIRE;
	w_data583w[3..0]	: WIRE;
	w_data608w[3..0]	: WIRE;
	w_data633w[3..0]	: WIRE;
	w_data658w[3..0]	: WIRE;
	w_data683w[3..0]	: WIRE;

BEGIN 
	result[] = result_node[];
	result_node[] = ( (((w_data683w[1..1] & sel_node[0..0]) & (! (((w_data683w[0..0] & (! sel_node[1..1])) & (! sel_node[0..0])) # (sel_node[1..1] & (sel_node[0..0] # w_data683w[2..2]))))) # ((((w_data683w[0..0] & (! sel_node[1..1])) & (! sel_node[0..0])) # (sel_node[1..1] & (sel_node[0..0] # w_data683w[2..2]))) & (w_data683w[3..3] # (! sel_node[0..0])))), (((w_data658w[1..1] & sel_node[0..0]) & (! (((w_data658w[0..0] & (! sel_node[1..1])) & (! sel_node[0..0])) # (sel_node[1..1] & (sel_node[0..0] # w_data658w[2..2]))))) # ((((w_data658w[0..0] & (! sel_node[1..1])) & (! sel_node[0..0])) # (sel_node[1..1] & (sel_node[0..0] # w_data658w[2..2]))) & (w_data658w[3..3] # (! sel_node[0..0])))), (((w_data633w[1..1] & sel_node[0..0]) & (! (((w_data633w[0..0] & (! sel_node[1..1])) & (! sel_node[0..0])) # (sel_node[1..1] & (sel_node[0..0] # w_data633w[2..2]))))) # ((((w_data633w[0..0] & (! sel_node[1..1])) & (! sel_node[0..0])) # (sel_node[1..1] & (sel_node[0..0] # w_data633w[2..2]))) & (w_data633w[3..3] # (! sel_node[0..0])))), (((w_data608w[1..1] & sel_node[0..0]) & (! (((w_data608w[0..0] & (! sel_node[1..1])) & (! sel_node[0..0])) # (sel_node[1..1] & (sel_node[0..0] # w_data608w[2..2]))))) # ((((w_data608w[0..0] & (! sel_node[1..1])) & (! sel_node[0..0])) # (sel_node[1..1] & (sel_node[0..0] # w_data608w[2..2]))) & (w_data608w[3..3] # (! sel_node[0..0])))), (((w_data583w[1..1] & sel_node[0..0]) & (! (((w_data583w[0..0] & (! sel_node[1..1])) & (! sel_node[0..0])) # (sel_node[1..1] & (sel_node[0..0] # w_data583w[2..2]))))) # ((((w_data583w[0..0] & (! sel_node[1..1])) & (! sel_node[0..0])) # (sel_node[1..1] & (sel_node[0..0] # w_data583w[2..2]))) & (w_data583w[3..3] # (! sel_node[0..0])))), (((w_data558w[1..1] & sel_node[0..0]) & (! (((w_data558w[0..0] & (! sel_node[1..1])) & (! sel_node[0..0])) # (sel_node[1..1] & (sel_node[0..0] # w_data558w[2..2]))))) # ((((w_data558w[0..0] & (! sel_node[1..1])) & (! sel_node[0..0])) # (sel_node[1..1] & (sel_node[0..0] # w_data558w[2..2]))) & (w_data558w[3..3] # (! sel_node[0..0])))), (((w_data533w[1..1] & sel_node[0..0]) & (! (((w_data533w[0..0] & (! sel_node[1..1])) & (! sel_node[0..0])) # (sel_node[1..1] & (sel_node[0..0] # w_data533w[2..2]))))) # ((((w_data533w[0..0] & (! sel_node[1..1])) & (! sel_node[0..0])) # (sel_node[1..1] & (sel_node[0..0] # w_data533w[2..2]))) & (w_data533w[3..3] # (! sel_node[0..0])))), (((w_data508w[1..1] & sel_node[0..0]) & (! (((w_data508w[0..0] & (! sel_node[1..1])) & (! sel_node[0..0])) # (sel_node[1..1] & (sel_node[0..0] # w_data508w[2..2]))))) # ((((w_data508w[0..0] & (! sel_node[1..1])) & (! sel_node[0..0])) # (sel_node[1..1] & (sel_node[0..0] # w_data508w[2..2]))) & (w_data508w[3..3] # (! sel_node[0..0])))), (((w_data483w[1..1] & sel_node[0..0]) & (! (((w_data483w[0..0] & (! sel_node[1..1])) & (! sel_node[0..0])) # (sel_node[1..1] & (sel_node[0..0] # w_data483w[2..2]))))) # ((((w_data483w[0..0] & (! sel_node[1..1])) & (! sel_node[0..0])) # (sel_node[1..1] & (sel_node[0..0] # w_data483w[2..2]))) & (w_data483w[3..3] # (! sel_node[0..0])))), (((w_data458w[1..1] & sel_node[0..0]) & (! (((w_data458w[0..0] & (! sel_node[1..1])) & (! sel_node[0..0])) # (sel_node[1..1] & (sel_node[0..0] # w_data458w[2..2]))))) # ((((w_data458w[0..0] & (! sel_node[1..1])) & (! sel_node[0..0])) # (sel_node[1..1] & (sel_node[0..0] # w_data458w[2..2]))) & (w_data458w[3..3] # (! sel_node[0..0])))), (((w_data428w[1..1] & sel_node[0..0]) & (! (((w_data428w[0..0] & (! sel_node[1..1])) & (! sel_node[0..0])) # (sel_node[1..1] & (sel_node[0..0] # w_data428w[2..2]))))) # ((((w_data428w[0..0] & (! sel_node[1..1])) & (! sel_node[0..0])) # (sel_node[1..1] & (sel_node[0..0] # w_data428w[2..2]))) & (w_data428w[3..3] # (! sel_node[0..0])))));
	sel_node[] = ( sel[1..0]);
	w_data428w[] = ( data[33..33], data[22..22], data[11..11], data[0..0]);
	w_data458w[] = ( data[34..34], data[23..23], data[12..12], data[1..1]);
	w_data483w[] = ( data[35..35], data[24..24], data[13..13], data[2..2]);
	w_data508w[] = ( data[36..36], data[25..25], data[14..14], data[3..3]);
	w_data533w[] = ( data[37..37], data[26..26], data[15..15], data[4..4]);
	w_data558w[] = ( data[38..38], data[27..27], data[16..16], data[5..5]);
	w_data583w[] = ( data[39..39], data[28..28], data[17..17], data[6..6]);
	w_data608w[] = ( data[40..40], data[29..29], data[18..18], data[7..7]);
	w_data633w[] = ( data[41..41], data[30..30], data[19..19], data[8..8]);
	w_data658w[] = ( data[42..42], data[31..31], data[20..20], data[9..9]);
	w_data683w[] = ( data[43..43], data[32..32], data[21..21], data[10..10]);
END;
--VALID FILE
